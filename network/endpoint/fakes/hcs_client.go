// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/network/endpoint"
	"github.com/Microsoft/hcsshim/internal/hns"
)

type HCSClient struct {
	CreateEndpointStub        func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)
	createEndpointMutex       sync.RWMutex
	createEndpointArgsForCall []struct {
		arg1 *hns.HNSEndpoint
	}
	createEndpointReturns struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	createEndpointReturnsOnCall map[int]struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	DeleteEndpointStub        func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)
	deleteEndpointMutex       sync.RWMutex
	deleteEndpointArgsForCall []struct {
		arg1 *hns.HNSEndpoint
	}
	deleteEndpointReturns struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	deleteEndpointReturnsOnCall map[int]struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	GetHNSEndpointByIDStub        func(string) (*hns.HNSEndpoint, error)
	getHNSEndpointByIDMutex       sync.RWMutex
	getHNSEndpointByIDArgsForCall []struct {
		arg1 string
	}
	getHNSEndpointByIDReturns struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	getHNSEndpointByIDReturnsOnCall map[int]struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	GetHNSEndpointByNameStub        func(string) (*hns.HNSEndpoint, error)
	getHNSEndpointByNameMutex       sync.RWMutex
	getHNSEndpointByNameArgsForCall []struct {
		arg1 string
	}
	getHNSEndpointByNameReturns struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	getHNSEndpointByNameReturnsOnCall map[int]struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	GetHNSNetworkByNameStub        func(string) (*hns.HNSNetwork, error)
	getHNSNetworkByNameMutex       sync.RWMutex
	getHNSNetworkByNameArgsForCall []struct {
		arg1 string
	}
	getHNSNetworkByNameReturns struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	getHNSNetworkByNameReturnsOnCall map[int]struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	HotAttachEndpointStub        func(string, string, func() (bool, error)) error
	hotAttachEndpointMutex       sync.RWMutex
	hotAttachEndpointArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 func() (bool, error)
	}
	hotAttachEndpointReturns struct {
		result1 error
	}
	hotAttachEndpointReturnsOnCall map[int]struct {
		result1 error
	}
	HotDetachEndpointStub        func(string, string) error
	hotDetachEndpointMutex       sync.RWMutex
	hotDetachEndpointArgsForCall []struct {
		arg1 string
		arg2 string
	}
	hotDetachEndpointReturns struct {
		result1 error
	}
	hotDetachEndpointReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateEndpointStub        func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)
	updateEndpointMutex       sync.RWMutex
	updateEndpointArgsForCall []struct {
		arg1 *hns.HNSEndpoint
	}
	updateEndpointReturns struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	updateEndpointReturnsOnCall map[int]struct {
		result1 *hns.HNSEndpoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HCSClient) CreateEndpoint(arg1 *hns.HNSEndpoint) (*hns.HNSEndpoint, error) {
	fake.createEndpointMutex.Lock()
	ret, specificReturn := fake.createEndpointReturnsOnCall[len(fake.createEndpointArgsForCall)]
	fake.createEndpointArgsForCall = append(fake.createEndpointArgsForCall, struct {
		arg1 *hns.HNSEndpoint
	}{arg1})
	stub := fake.CreateEndpointStub
	fakeReturns := fake.createEndpointReturns
	fake.recordInvocation("CreateEndpoint", []interface{}{arg1})
	fake.createEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) CreateEndpointCallCount() int {
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	return len(fake.createEndpointArgsForCall)
}

func (fake *HCSClient) CreateEndpointCalls(stub func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)) {
	fake.createEndpointMutex.Lock()
	defer fake.createEndpointMutex.Unlock()
	fake.CreateEndpointStub = stub
}

func (fake *HCSClient) CreateEndpointArgsForCall(i int) *hns.HNSEndpoint {
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	argsForCall := fake.createEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) CreateEndpointReturns(result1 *hns.HNSEndpoint, result2 error) {
	fake.createEndpointMutex.Lock()
	defer fake.createEndpointMutex.Unlock()
	fake.CreateEndpointStub = nil
	fake.createEndpointReturns = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) CreateEndpointReturnsOnCall(i int, result1 *hns.HNSEndpoint, result2 error) {
	fake.createEndpointMutex.Lock()
	defer fake.createEndpointMutex.Unlock()
	fake.CreateEndpointStub = nil
	if fake.createEndpointReturnsOnCall == nil {
		fake.createEndpointReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSEndpoint
			result2 error
		})
	}
	fake.createEndpointReturnsOnCall[i] = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) DeleteEndpoint(arg1 *hns.HNSEndpoint) (*hns.HNSEndpoint, error) {
	fake.deleteEndpointMutex.Lock()
	ret, specificReturn := fake.deleteEndpointReturnsOnCall[len(fake.deleteEndpointArgsForCall)]
	fake.deleteEndpointArgsForCall = append(fake.deleteEndpointArgsForCall, struct {
		arg1 *hns.HNSEndpoint
	}{arg1})
	stub := fake.DeleteEndpointStub
	fakeReturns := fake.deleteEndpointReturns
	fake.recordInvocation("DeleteEndpoint", []interface{}{arg1})
	fake.deleteEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) DeleteEndpointCallCount() int {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return len(fake.deleteEndpointArgsForCall)
}

func (fake *HCSClient) DeleteEndpointCalls(stub func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = stub
}

func (fake *HCSClient) DeleteEndpointArgsForCall(i int) *hns.HNSEndpoint {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	argsForCall := fake.deleteEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) DeleteEndpointReturns(result1 *hns.HNSEndpoint, result2 error) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = nil
	fake.deleteEndpointReturns = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) DeleteEndpointReturnsOnCall(i int, result1 *hns.HNSEndpoint, result2 error) {
	fake.deleteEndpointMutex.Lock()
	defer fake.deleteEndpointMutex.Unlock()
	fake.DeleteEndpointStub = nil
	if fake.deleteEndpointReturnsOnCall == nil {
		fake.deleteEndpointReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSEndpoint
			result2 error
		})
	}
	fake.deleteEndpointReturnsOnCall[i] = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSEndpointByID(arg1 string) (*hns.HNSEndpoint, error) {
	fake.getHNSEndpointByIDMutex.Lock()
	ret, specificReturn := fake.getHNSEndpointByIDReturnsOnCall[len(fake.getHNSEndpointByIDArgsForCall)]
	fake.getHNSEndpointByIDArgsForCall = append(fake.getHNSEndpointByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetHNSEndpointByIDStub
	fakeReturns := fake.getHNSEndpointByIDReturns
	fake.recordInvocation("GetHNSEndpointByID", []interface{}{arg1})
	fake.getHNSEndpointByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) GetHNSEndpointByIDCallCount() int {
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	return len(fake.getHNSEndpointByIDArgsForCall)
}

func (fake *HCSClient) GetHNSEndpointByIDCalls(stub func(string) (*hns.HNSEndpoint, error)) {
	fake.getHNSEndpointByIDMutex.Lock()
	defer fake.getHNSEndpointByIDMutex.Unlock()
	fake.GetHNSEndpointByIDStub = stub
}

func (fake *HCSClient) GetHNSEndpointByIDArgsForCall(i int) string {
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	argsForCall := fake.getHNSEndpointByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) GetHNSEndpointByIDReturns(result1 *hns.HNSEndpoint, result2 error) {
	fake.getHNSEndpointByIDMutex.Lock()
	defer fake.getHNSEndpointByIDMutex.Unlock()
	fake.GetHNSEndpointByIDStub = nil
	fake.getHNSEndpointByIDReturns = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSEndpointByIDReturnsOnCall(i int, result1 *hns.HNSEndpoint, result2 error) {
	fake.getHNSEndpointByIDMutex.Lock()
	defer fake.getHNSEndpointByIDMutex.Unlock()
	fake.GetHNSEndpointByIDStub = nil
	if fake.getHNSEndpointByIDReturnsOnCall == nil {
		fake.getHNSEndpointByIDReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSEndpoint
			result2 error
		})
	}
	fake.getHNSEndpointByIDReturnsOnCall[i] = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSEndpointByName(arg1 string) (*hns.HNSEndpoint, error) {
	fake.getHNSEndpointByNameMutex.Lock()
	ret, specificReturn := fake.getHNSEndpointByNameReturnsOnCall[len(fake.getHNSEndpointByNameArgsForCall)]
	fake.getHNSEndpointByNameArgsForCall = append(fake.getHNSEndpointByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetHNSEndpointByNameStub
	fakeReturns := fake.getHNSEndpointByNameReturns
	fake.recordInvocation("GetHNSEndpointByName", []interface{}{arg1})
	fake.getHNSEndpointByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) GetHNSEndpointByNameCallCount() int {
	fake.getHNSEndpointByNameMutex.RLock()
	defer fake.getHNSEndpointByNameMutex.RUnlock()
	return len(fake.getHNSEndpointByNameArgsForCall)
}

func (fake *HCSClient) GetHNSEndpointByNameCalls(stub func(string) (*hns.HNSEndpoint, error)) {
	fake.getHNSEndpointByNameMutex.Lock()
	defer fake.getHNSEndpointByNameMutex.Unlock()
	fake.GetHNSEndpointByNameStub = stub
}

func (fake *HCSClient) GetHNSEndpointByNameArgsForCall(i int) string {
	fake.getHNSEndpointByNameMutex.RLock()
	defer fake.getHNSEndpointByNameMutex.RUnlock()
	argsForCall := fake.getHNSEndpointByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) GetHNSEndpointByNameReturns(result1 *hns.HNSEndpoint, result2 error) {
	fake.getHNSEndpointByNameMutex.Lock()
	defer fake.getHNSEndpointByNameMutex.Unlock()
	fake.GetHNSEndpointByNameStub = nil
	fake.getHNSEndpointByNameReturns = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSEndpointByNameReturnsOnCall(i int, result1 *hns.HNSEndpoint, result2 error) {
	fake.getHNSEndpointByNameMutex.Lock()
	defer fake.getHNSEndpointByNameMutex.Unlock()
	fake.GetHNSEndpointByNameStub = nil
	if fake.getHNSEndpointByNameReturnsOnCall == nil {
		fake.getHNSEndpointByNameReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSEndpoint
			result2 error
		})
	}
	fake.getHNSEndpointByNameReturnsOnCall[i] = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSNetworkByName(arg1 string) (*hns.HNSNetwork, error) {
	fake.getHNSNetworkByNameMutex.Lock()
	ret, specificReturn := fake.getHNSNetworkByNameReturnsOnCall[len(fake.getHNSNetworkByNameArgsForCall)]
	fake.getHNSNetworkByNameArgsForCall = append(fake.getHNSNetworkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetHNSNetworkByNameStub
	fakeReturns := fake.getHNSNetworkByNameReturns
	fake.recordInvocation("GetHNSNetworkByName", []interface{}{arg1})
	fake.getHNSNetworkByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) GetHNSNetworkByNameCallCount() int {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	return len(fake.getHNSNetworkByNameArgsForCall)
}

func (fake *HCSClient) GetHNSNetworkByNameCalls(stub func(string) (*hns.HNSNetwork, error)) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = stub
}

func (fake *HCSClient) GetHNSNetworkByNameArgsForCall(i int) string {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	argsForCall := fake.getHNSNetworkByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) GetHNSNetworkByNameReturns(result1 *hns.HNSNetwork, result2 error) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = nil
	fake.getHNSNetworkByNameReturns = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSNetworkByNameReturnsOnCall(i int, result1 *hns.HNSNetwork, result2 error) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = nil
	if fake.getHNSNetworkByNameReturnsOnCall == nil {
		fake.getHNSNetworkByNameReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSNetwork
			result2 error
		})
	}
	fake.getHNSNetworkByNameReturnsOnCall[i] = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) HotAttachEndpoint(arg1 string, arg2 string, arg3 func() (bool, error)) error {
	fake.hotAttachEndpointMutex.Lock()
	ret, specificReturn := fake.hotAttachEndpointReturnsOnCall[len(fake.hotAttachEndpointArgsForCall)]
	fake.hotAttachEndpointArgsForCall = append(fake.hotAttachEndpointArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 func() (bool, error)
	}{arg1, arg2, arg3})
	stub := fake.HotAttachEndpointStub
	fakeReturns := fake.hotAttachEndpointReturns
	fake.recordInvocation("HotAttachEndpoint", []interface{}{arg1, arg2, arg3})
	fake.hotAttachEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HCSClient) HotAttachEndpointCallCount() int {
	fake.hotAttachEndpointMutex.RLock()
	defer fake.hotAttachEndpointMutex.RUnlock()
	return len(fake.hotAttachEndpointArgsForCall)
}

func (fake *HCSClient) HotAttachEndpointCalls(stub func(string, string, func() (bool, error)) error) {
	fake.hotAttachEndpointMutex.Lock()
	defer fake.hotAttachEndpointMutex.Unlock()
	fake.HotAttachEndpointStub = stub
}

func (fake *HCSClient) HotAttachEndpointArgsForCall(i int) (string, string, func() (bool, error)) {
	fake.hotAttachEndpointMutex.RLock()
	defer fake.hotAttachEndpointMutex.RUnlock()
	argsForCall := fake.hotAttachEndpointArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HCSClient) HotAttachEndpointReturns(result1 error) {
	fake.hotAttachEndpointMutex.Lock()
	defer fake.hotAttachEndpointMutex.Unlock()
	fake.HotAttachEndpointStub = nil
	fake.hotAttachEndpointReturns = struct {
		result1 error
	}{result1}
}

func (fake *HCSClient) HotAttachEndpointReturnsOnCall(i int, result1 error) {
	fake.hotAttachEndpointMutex.Lock()
	defer fake.hotAttachEndpointMutex.Unlock()
	fake.HotAttachEndpointStub = nil
	if fake.hotAttachEndpointReturnsOnCall == nil {
		fake.hotAttachEndpointReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.hotAttachEndpointReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *HCSClient) HotDetachEndpoint(arg1 string, arg2 string) error {
	fake.hotDetachEndpointMutex.Lock()
	ret, specificReturn := fake.hotDetachEndpointReturnsOnCall[len(fake.hotDetachEndpointArgsForCall)]
	fake.hotDetachEndpointArgsForCall = append(fake.hotDetachEndpointArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.HotDetachEndpointStub
	fakeReturns := fake.hotDetachEndpointReturns
	fake.recordInvocation("HotDetachEndpoint", []interface{}{arg1, arg2})
	fake.hotDetachEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HCSClient) HotDetachEndpointCallCount() int {
	fake.hotDetachEndpointMutex.RLock()
	defer fake.hotDetachEndpointMutex.RUnlock()
	return len(fake.hotDetachEndpointArgsForCall)
}

func (fake *HCSClient) HotDetachEndpointCalls(stub func(string, string) error) {
	fake.hotDetachEndpointMutex.Lock()
	defer fake.hotDetachEndpointMutex.Unlock()
	fake.HotDetachEndpointStub = stub
}

func (fake *HCSClient) HotDetachEndpointArgsForCall(i int) (string, string) {
	fake.hotDetachEndpointMutex.RLock()
	defer fake.hotDetachEndpointMutex.RUnlock()
	argsForCall := fake.hotDetachEndpointArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HCSClient) HotDetachEndpointReturns(result1 error) {
	fake.hotDetachEndpointMutex.Lock()
	defer fake.hotDetachEndpointMutex.Unlock()
	fake.HotDetachEndpointStub = nil
	fake.hotDetachEndpointReturns = struct {
		result1 error
	}{result1}
}

func (fake *HCSClient) HotDetachEndpointReturnsOnCall(i int, result1 error) {
	fake.hotDetachEndpointMutex.Lock()
	defer fake.hotDetachEndpointMutex.Unlock()
	fake.HotDetachEndpointStub = nil
	if fake.hotDetachEndpointReturnsOnCall == nil {
		fake.hotDetachEndpointReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.hotDetachEndpointReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *HCSClient) UpdateEndpoint(arg1 *hns.HNSEndpoint) (*hns.HNSEndpoint, error) {
	fake.updateEndpointMutex.Lock()
	ret, specificReturn := fake.updateEndpointReturnsOnCall[len(fake.updateEndpointArgsForCall)]
	fake.updateEndpointArgsForCall = append(fake.updateEndpointArgsForCall, struct {
		arg1 *hns.HNSEndpoint
	}{arg1})
	stub := fake.UpdateEndpointStub
	fakeReturns := fake.updateEndpointReturns
	fake.recordInvocation("UpdateEndpoint", []interface{}{arg1})
	fake.updateEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) UpdateEndpointCallCount() int {
	fake.updateEndpointMutex.RLock()
	defer fake.updateEndpointMutex.RUnlock()
	return len(fake.updateEndpointArgsForCall)
}

func (fake *HCSClient) UpdateEndpointCalls(stub func(*hns.HNSEndpoint) (*hns.HNSEndpoint, error)) {
	fake.updateEndpointMutex.Lock()
	defer fake.updateEndpointMutex.Unlock()
	fake.UpdateEndpointStub = stub
}

func (fake *HCSClient) UpdateEndpointArgsForCall(i int) *hns.HNSEndpoint {
	fake.updateEndpointMutex.RLock()
	defer fake.updateEndpointMutex.RUnlock()
	argsForCall := fake.updateEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) UpdateEndpointReturns(result1 *hns.HNSEndpoint, result2 error) {
	fake.updateEndpointMutex.Lock()
	defer fake.updateEndpointMutex.Unlock()
	fake.UpdateEndpointStub = nil
	fake.updateEndpointReturns = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) UpdateEndpointReturnsOnCall(i int, result1 *hns.HNSEndpoint, result2 error) {
	fake.updateEndpointMutex.Lock()
	defer fake.updateEndpointMutex.Unlock()
	fake.UpdateEndpointStub = nil
	if fake.updateEndpointReturnsOnCall == nil {
		fake.updateEndpointReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSEndpoint
			result2 error
		})
	}
	fake.updateEndpointReturnsOnCall[i] = struct {
		result1 *hns.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	fake.getHNSEndpointByNameMutex.RLock()
	defer fake.getHNSEndpointByNameMutex.RUnlock()
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	fake.hotAttachEndpointMutex.RLock()
	defer fake.hotAttachEndpointMutex.RUnlock()
	fake.hotDetachEndpointMutex.RLock()
	defer fake.hotDetachEndpointMutex.RUnlock()
	fake.updateEndpointMutex.RLock()
	defer fake.updateEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HCSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ endpoint.HCSClient = new(HCSClient)
