// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/network"
	"github.com/Microsoft/hcsshim/internal/hns"
)

type HCSClient struct {
	CreateNetworkStub        func(*hns.HNSNetwork, func() (bool, error)) (*hns.HNSNetwork, error)
	createNetworkMutex       sync.RWMutex
	createNetworkArgsForCall []struct {
		arg1 *hns.HNSNetwork
		arg2 func() (bool, error)
	}
	createNetworkReturns struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	createNetworkReturnsOnCall map[int]struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	DeleteNetworkStub        func(*hns.HNSNetwork) (*hns.HNSNetwork, error)
	deleteNetworkMutex       sync.RWMutex
	deleteNetworkArgsForCall []struct {
		arg1 *hns.HNSNetwork
	}
	deleteNetworkReturns struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	deleteNetworkReturnsOnCall map[int]struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	GetHNSNetworkByNameStub        func(string) (*hns.HNSNetwork, error)
	getHNSNetworkByNameMutex       sync.RWMutex
	getHNSNetworkByNameArgsForCall []struct {
		arg1 string
	}
	getHNSNetworkByNameReturns struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	getHNSNetworkByNameReturnsOnCall map[int]struct {
		result1 *hns.HNSNetwork
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HCSClient) CreateNetwork(arg1 *hns.HNSNetwork, arg2 func() (bool, error)) (*hns.HNSNetwork, error) {
	fake.createNetworkMutex.Lock()
	ret, specificReturn := fake.createNetworkReturnsOnCall[len(fake.createNetworkArgsForCall)]
	fake.createNetworkArgsForCall = append(fake.createNetworkArgsForCall, struct {
		arg1 *hns.HNSNetwork
		arg2 func() (bool, error)
	}{arg1, arg2})
	stub := fake.CreateNetworkStub
	fakeReturns := fake.createNetworkReturns
	fake.recordInvocation("CreateNetwork", []interface{}{arg1, arg2})
	fake.createNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) CreateNetworkCallCount() int {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return len(fake.createNetworkArgsForCall)
}

func (fake *HCSClient) CreateNetworkCalls(stub func(*hns.HNSNetwork, func() (bool, error)) (*hns.HNSNetwork, error)) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = stub
}

func (fake *HCSClient) CreateNetworkArgsForCall(i int) (*hns.HNSNetwork, func() (bool, error)) {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	argsForCall := fake.createNetworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HCSClient) CreateNetworkReturns(result1 *hns.HNSNetwork, result2 error) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = nil
	fake.createNetworkReturns = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) CreateNetworkReturnsOnCall(i int, result1 *hns.HNSNetwork, result2 error) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = nil
	if fake.createNetworkReturnsOnCall == nil {
		fake.createNetworkReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSNetwork
			result2 error
		})
	}
	fake.createNetworkReturnsOnCall[i] = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) DeleteNetwork(arg1 *hns.HNSNetwork) (*hns.HNSNetwork, error) {
	fake.deleteNetworkMutex.Lock()
	ret, specificReturn := fake.deleteNetworkReturnsOnCall[len(fake.deleteNetworkArgsForCall)]
	fake.deleteNetworkArgsForCall = append(fake.deleteNetworkArgsForCall, struct {
		arg1 *hns.HNSNetwork
	}{arg1})
	stub := fake.DeleteNetworkStub
	fakeReturns := fake.deleteNetworkReturns
	fake.recordInvocation("DeleteNetwork", []interface{}{arg1})
	fake.deleteNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) DeleteNetworkCallCount() int {
	fake.deleteNetworkMutex.RLock()
	defer fake.deleteNetworkMutex.RUnlock()
	return len(fake.deleteNetworkArgsForCall)
}

func (fake *HCSClient) DeleteNetworkCalls(stub func(*hns.HNSNetwork) (*hns.HNSNetwork, error)) {
	fake.deleteNetworkMutex.Lock()
	defer fake.deleteNetworkMutex.Unlock()
	fake.DeleteNetworkStub = stub
}

func (fake *HCSClient) DeleteNetworkArgsForCall(i int) *hns.HNSNetwork {
	fake.deleteNetworkMutex.RLock()
	defer fake.deleteNetworkMutex.RUnlock()
	argsForCall := fake.deleteNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) DeleteNetworkReturns(result1 *hns.HNSNetwork, result2 error) {
	fake.deleteNetworkMutex.Lock()
	defer fake.deleteNetworkMutex.Unlock()
	fake.DeleteNetworkStub = nil
	fake.deleteNetworkReturns = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) DeleteNetworkReturnsOnCall(i int, result1 *hns.HNSNetwork, result2 error) {
	fake.deleteNetworkMutex.Lock()
	defer fake.deleteNetworkMutex.Unlock()
	fake.DeleteNetworkStub = nil
	if fake.deleteNetworkReturnsOnCall == nil {
		fake.deleteNetworkReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSNetwork
			result2 error
		})
	}
	fake.deleteNetworkReturnsOnCall[i] = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSNetworkByName(arg1 string) (*hns.HNSNetwork, error) {
	fake.getHNSNetworkByNameMutex.Lock()
	ret, specificReturn := fake.getHNSNetworkByNameReturnsOnCall[len(fake.getHNSNetworkByNameArgsForCall)]
	fake.getHNSNetworkByNameArgsForCall = append(fake.getHNSNetworkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetHNSNetworkByNameStub
	fakeReturns := fake.getHNSNetworkByNameReturns
	fake.recordInvocation("GetHNSNetworkByName", []interface{}{arg1})
	fake.getHNSNetworkByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HCSClient) GetHNSNetworkByNameCallCount() int {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	return len(fake.getHNSNetworkByNameArgsForCall)
}

func (fake *HCSClient) GetHNSNetworkByNameCalls(stub func(string) (*hns.HNSNetwork, error)) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = stub
}

func (fake *HCSClient) GetHNSNetworkByNameArgsForCall(i int) string {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	argsForCall := fake.getHNSNetworkByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HCSClient) GetHNSNetworkByNameReturns(result1 *hns.HNSNetwork, result2 error) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = nil
	fake.getHNSNetworkByNameReturns = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) GetHNSNetworkByNameReturnsOnCall(i int, result1 *hns.HNSNetwork, result2 error) {
	fake.getHNSNetworkByNameMutex.Lock()
	defer fake.getHNSNetworkByNameMutex.Unlock()
	fake.GetHNSNetworkByNameStub = nil
	if fake.getHNSNetworkByNameReturnsOnCall == nil {
		fake.getHNSNetworkByNameReturnsOnCall = make(map[int]struct {
			result1 *hns.HNSNetwork
			result2 error
		})
	}
	fake.getHNSNetworkByNameReturnsOnCall[i] = struct {
		result1 *hns.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *HCSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	fake.deleteNetworkMutex.RLock()
	defer fake.deleteNetworkMutex.RUnlock()
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HCSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ network.HCSClient = new(HCSClient)
