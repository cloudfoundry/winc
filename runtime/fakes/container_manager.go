// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/hcs"
	"code.cloudfoundry.org/winc/runtime"
	"code.cloudfoundry.org/winc/runtime/container"
	specs "github.com/opencontainers/runtime-spec/specs-go"
)

type ContainerManager struct {
	CreateStub        func(*specs.Spec, string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *specs.Spec
		arg2 string
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	CredentialSpecStub        func(string) (string, error)
	credentialSpecMutex       sync.RWMutex
	credentialSpecArgsForCall []struct {
		arg1 string
	}
	credentialSpecReturns struct {
		result1 string
		result2 error
	}
	credentialSpecReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CredentialSpecMappingStub        func(string, string) (string, error)
	credentialSpecMappingMutex       sync.RWMutex
	credentialSpecMappingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	credentialSpecMappingReturns struct {
		result1 string
		result2 error
	}
	credentialSpecMappingReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteStub        func(bool) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 bool
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	ExecStub        func(*specs.Process, bool) (hcs.Process, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		arg1 *specs.Process
		arg2 bool
	}
	execReturns struct {
		result1 hcs.Process
		result2 error
	}
	execReturnsOnCall map[int]struct {
		result1 hcs.Process
		result2 error
	}
	SpecStub        func(string) (*specs.Spec, error)
	specMutex       sync.RWMutex
	specArgsForCall []struct {
		arg1 string
	}
	specReturns struct {
		result1 *specs.Spec
		result2 error
	}
	specReturnsOnCall map[int]struct {
		result1 *specs.Spec
		result2 error
	}
	StatsStub        func() (container.Statistics, error)
	statsMutex       sync.RWMutex
	statsArgsForCall []struct {
	}
	statsReturns struct {
		result1 container.Statistics
		result2 error
	}
	statsReturnsOnCall map[int]struct {
		result1 container.Statistics
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ContainerManager) Create(arg1 *specs.Spec, arg2 string) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *specs.Spec
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ContainerManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *ContainerManager) CreateCalls(stub func(*specs.Spec, string) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *ContainerManager) CreateArgsForCall(i int) (*specs.Spec, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ContainerManager) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *ContainerManager) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ContainerManager) CredentialSpec(arg1 string) (string, error) {
	fake.credentialSpecMutex.Lock()
	ret, specificReturn := fake.credentialSpecReturnsOnCall[len(fake.credentialSpecArgsForCall)]
	fake.credentialSpecArgsForCall = append(fake.credentialSpecArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CredentialSpecStub
	fakeReturns := fake.credentialSpecReturns
	fake.recordInvocation("CredentialSpec", []interface{}{arg1})
	fake.credentialSpecMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ContainerManager) CredentialSpecCallCount() int {
	fake.credentialSpecMutex.RLock()
	defer fake.credentialSpecMutex.RUnlock()
	return len(fake.credentialSpecArgsForCall)
}

func (fake *ContainerManager) CredentialSpecCalls(stub func(string) (string, error)) {
	fake.credentialSpecMutex.Lock()
	defer fake.credentialSpecMutex.Unlock()
	fake.CredentialSpecStub = stub
}

func (fake *ContainerManager) CredentialSpecArgsForCall(i int) string {
	fake.credentialSpecMutex.RLock()
	defer fake.credentialSpecMutex.RUnlock()
	argsForCall := fake.credentialSpecArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ContainerManager) CredentialSpecReturns(result1 string, result2 error) {
	fake.credentialSpecMutex.Lock()
	defer fake.credentialSpecMutex.Unlock()
	fake.CredentialSpecStub = nil
	fake.credentialSpecReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) CredentialSpecReturnsOnCall(i int, result1 string, result2 error) {
	fake.credentialSpecMutex.Lock()
	defer fake.credentialSpecMutex.Unlock()
	fake.CredentialSpecStub = nil
	if fake.credentialSpecReturnsOnCall == nil {
		fake.credentialSpecReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.credentialSpecReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) CredentialSpecMapping(arg1 string, arg2 string) (string, error) {
	fake.credentialSpecMappingMutex.Lock()
	ret, specificReturn := fake.credentialSpecMappingReturnsOnCall[len(fake.credentialSpecMappingArgsForCall)]
	fake.credentialSpecMappingArgsForCall = append(fake.credentialSpecMappingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CredentialSpecMappingStub
	fakeReturns := fake.credentialSpecMappingReturns
	fake.recordInvocation("CredentialSpecMapping", []interface{}{arg1, arg2})
	fake.credentialSpecMappingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ContainerManager) CredentialSpecMappingCallCount() int {
	fake.credentialSpecMappingMutex.RLock()
	defer fake.credentialSpecMappingMutex.RUnlock()
	return len(fake.credentialSpecMappingArgsForCall)
}

func (fake *ContainerManager) CredentialSpecMappingCalls(stub func(string, string) (string, error)) {
	fake.credentialSpecMappingMutex.Lock()
	defer fake.credentialSpecMappingMutex.Unlock()
	fake.CredentialSpecMappingStub = stub
}

func (fake *ContainerManager) CredentialSpecMappingArgsForCall(i int) (string, string) {
	fake.credentialSpecMappingMutex.RLock()
	defer fake.credentialSpecMappingMutex.RUnlock()
	argsForCall := fake.credentialSpecMappingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ContainerManager) CredentialSpecMappingReturns(result1 string, result2 error) {
	fake.credentialSpecMappingMutex.Lock()
	defer fake.credentialSpecMappingMutex.Unlock()
	fake.CredentialSpecMappingStub = nil
	fake.credentialSpecMappingReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) CredentialSpecMappingReturnsOnCall(i int, result1 string, result2 error) {
	fake.credentialSpecMappingMutex.Lock()
	defer fake.credentialSpecMappingMutex.Unlock()
	fake.CredentialSpecMappingStub = nil
	if fake.credentialSpecMappingReturnsOnCall == nil {
		fake.credentialSpecMappingReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.credentialSpecMappingReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) Delete(arg1 bool) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ContainerManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *ContainerManager) DeleteCalls(stub func(bool) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *ContainerManager) DeleteArgsForCall(i int) bool {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ContainerManager) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *ContainerManager) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ContainerManager) Exec(arg1 *specs.Process, arg2 bool) (hcs.Process, error) {
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		arg1 *specs.Process
		arg2 bool
	}{arg1, arg2})
	stub := fake.ExecStub
	fakeReturns := fake.execReturns
	fake.recordInvocation("Exec", []interface{}{arg1, arg2})
	fake.execMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ContainerManager) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *ContainerManager) ExecCalls(stub func(*specs.Process, bool) (hcs.Process, error)) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = stub
}

func (fake *ContainerManager) ExecArgsForCall(i int) (*specs.Process, bool) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	argsForCall := fake.execArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ContainerManager) ExecReturns(result1 hcs.Process, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 hcs.Process
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) ExecReturnsOnCall(i int, result1 hcs.Process, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 hcs.Process
			result2 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 hcs.Process
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) Spec(arg1 string) (*specs.Spec, error) {
	fake.specMutex.Lock()
	ret, specificReturn := fake.specReturnsOnCall[len(fake.specArgsForCall)]
	fake.specArgsForCall = append(fake.specArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SpecStub
	fakeReturns := fake.specReturns
	fake.recordInvocation("Spec", []interface{}{arg1})
	fake.specMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ContainerManager) SpecCallCount() int {
	fake.specMutex.RLock()
	defer fake.specMutex.RUnlock()
	return len(fake.specArgsForCall)
}

func (fake *ContainerManager) SpecCalls(stub func(string) (*specs.Spec, error)) {
	fake.specMutex.Lock()
	defer fake.specMutex.Unlock()
	fake.SpecStub = stub
}

func (fake *ContainerManager) SpecArgsForCall(i int) string {
	fake.specMutex.RLock()
	defer fake.specMutex.RUnlock()
	argsForCall := fake.specArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ContainerManager) SpecReturns(result1 *specs.Spec, result2 error) {
	fake.specMutex.Lock()
	defer fake.specMutex.Unlock()
	fake.SpecStub = nil
	fake.specReturns = struct {
		result1 *specs.Spec
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) SpecReturnsOnCall(i int, result1 *specs.Spec, result2 error) {
	fake.specMutex.Lock()
	defer fake.specMutex.Unlock()
	fake.SpecStub = nil
	if fake.specReturnsOnCall == nil {
		fake.specReturnsOnCall = make(map[int]struct {
			result1 *specs.Spec
			result2 error
		})
	}
	fake.specReturnsOnCall[i] = struct {
		result1 *specs.Spec
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) Stats() (container.Statistics, error) {
	fake.statsMutex.Lock()
	ret, specificReturn := fake.statsReturnsOnCall[len(fake.statsArgsForCall)]
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct {
	}{})
	stub := fake.StatsStub
	fakeReturns := fake.statsReturns
	fake.recordInvocation("Stats", []interface{}{})
	fake.statsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ContainerManager) StatsCallCount() int {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *ContainerManager) StatsCalls(stub func() (container.Statistics, error)) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = stub
}

func (fake *ContainerManager) StatsReturns(result1 container.Statistics, result2 error) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 container.Statistics
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) StatsReturnsOnCall(i int, result1 container.Statistics, result2 error) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = nil
	if fake.statsReturnsOnCall == nil {
		fake.statsReturnsOnCall = make(map[int]struct {
			result1 container.Statistics
			result2 error
		})
	}
	fake.statsReturnsOnCall[i] = struct {
		result1 container.Statistics
		result2 error
	}{result1, result2}
}

func (fake *ContainerManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.credentialSpecMutex.RLock()
	defer fake.credentialSpecMutex.RUnlock()
	fake.credentialSpecMappingMutex.RLock()
	defer fake.credentialSpecMappingMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	fake.specMutex.RLock()
	defer fake.specMutex.RUnlock()
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ContainerManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.ContainerManager = new(ContainerManager)
