// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"os"
	"sync"

	"code.cloudfoundry.org/winc/runtime"
)

type WrappedProcess struct {
	AttachIOStub        func(io.Reader, io.Writer, io.Writer) (int, error)
	attachIOMutex       sync.RWMutex
	attachIOArgsForCall []struct {
		arg1 io.Reader
		arg2 io.Writer
		arg3 io.Writer
	}
	attachIOReturns struct {
		result1 int
		result2 error
	}
	attachIOReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	SetInterruptStub        func(chan os.Signal)
	setInterruptMutex       sync.RWMutex
	setInterruptArgsForCall []struct {
		arg1 chan os.Signal
	}
	WritePIDFileStub        func(string) error
	writePIDFileMutex       sync.RWMutex
	writePIDFileArgsForCall []struct {
		arg1 string
	}
	writePIDFileReturns struct {
		result1 error
	}
	writePIDFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WrappedProcess) AttachIO(arg1 io.Reader, arg2 io.Writer, arg3 io.Writer) (int, error) {
	fake.attachIOMutex.Lock()
	ret, specificReturn := fake.attachIOReturnsOnCall[len(fake.attachIOArgsForCall)]
	fake.attachIOArgsForCall = append(fake.attachIOArgsForCall, struct {
		arg1 io.Reader
		arg2 io.Writer
		arg3 io.Writer
	}{arg1, arg2, arg3})
	stub := fake.AttachIOStub
	fakeReturns := fake.attachIOReturns
	fake.recordInvocation("AttachIO", []interface{}{arg1, arg2, arg3})
	fake.attachIOMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WrappedProcess) AttachIOCallCount() int {
	fake.attachIOMutex.RLock()
	defer fake.attachIOMutex.RUnlock()
	return len(fake.attachIOArgsForCall)
}

func (fake *WrappedProcess) AttachIOCalls(stub func(io.Reader, io.Writer, io.Writer) (int, error)) {
	fake.attachIOMutex.Lock()
	defer fake.attachIOMutex.Unlock()
	fake.AttachIOStub = stub
}

func (fake *WrappedProcess) AttachIOArgsForCall(i int) (io.Reader, io.Writer, io.Writer) {
	fake.attachIOMutex.RLock()
	defer fake.attachIOMutex.RUnlock()
	argsForCall := fake.attachIOArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *WrappedProcess) AttachIOReturns(result1 int, result2 error) {
	fake.attachIOMutex.Lock()
	defer fake.attachIOMutex.Unlock()
	fake.AttachIOStub = nil
	fake.attachIOReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *WrappedProcess) AttachIOReturnsOnCall(i int, result1 int, result2 error) {
	fake.attachIOMutex.Lock()
	defer fake.attachIOMutex.Unlock()
	fake.AttachIOStub = nil
	if fake.attachIOReturnsOnCall == nil {
		fake.attachIOReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.attachIOReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *WrappedProcess) SetInterrupt(arg1 chan os.Signal) {
	fake.setInterruptMutex.Lock()
	fake.setInterruptArgsForCall = append(fake.setInterruptArgsForCall, struct {
		arg1 chan os.Signal
	}{arg1})
	stub := fake.SetInterruptStub
	fake.recordInvocation("SetInterrupt", []interface{}{arg1})
	fake.setInterruptMutex.Unlock()
	if stub != nil {
		fake.SetInterruptStub(arg1)
	}
}

func (fake *WrappedProcess) SetInterruptCallCount() int {
	fake.setInterruptMutex.RLock()
	defer fake.setInterruptMutex.RUnlock()
	return len(fake.setInterruptArgsForCall)
}

func (fake *WrappedProcess) SetInterruptCalls(stub func(chan os.Signal)) {
	fake.setInterruptMutex.Lock()
	defer fake.setInterruptMutex.Unlock()
	fake.SetInterruptStub = stub
}

func (fake *WrappedProcess) SetInterruptArgsForCall(i int) chan os.Signal {
	fake.setInterruptMutex.RLock()
	defer fake.setInterruptMutex.RUnlock()
	argsForCall := fake.setInterruptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WrappedProcess) WritePIDFile(arg1 string) error {
	fake.writePIDFileMutex.Lock()
	ret, specificReturn := fake.writePIDFileReturnsOnCall[len(fake.writePIDFileArgsForCall)]
	fake.writePIDFileArgsForCall = append(fake.writePIDFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WritePIDFileStub
	fakeReturns := fake.writePIDFileReturns
	fake.recordInvocation("WritePIDFile", []interface{}{arg1})
	fake.writePIDFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WrappedProcess) WritePIDFileCallCount() int {
	fake.writePIDFileMutex.RLock()
	defer fake.writePIDFileMutex.RUnlock()
	return len(fake.writePIDFileArgsForCall)
}

func (fake *WrappedProcess) WritePIDFileCalls(stub func(string) error) {
	fake.writePIDFileMutex.Lock()
	defer fake.writePIDFileMutex.Unlock()
	fake.WritePIDFileStub = stub
}

func (fake *WrappedProcess) WritePIDFileArgsForCall(i int) string {
	fake.writePIDFileMutex.RLock()
	defer fake.writePIDFileMutex.RUnlock()
	argsForCall := fake.writePIDFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WrappedProcess) WritePIDFileReturns(result1 error) {
	fake.writePIDFileMutex.Lock()
	defer fake.writePIDFileMutex.Unlock()
	fake.WritePIDFileStub = nil
	fake.writePIDFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *WrappedProcess) WritePIDFileReturnsOnCall(i int, result1 error) {
	fake.writePIDFileMutex.Lock()
	defer fake.writePIDFileMutex.Unlock()
	fake.WritePIDFileStub = nil
	if fake.writePIDFileReturnsOnCall == nil {
		fake.writePIDFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writePIDFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WrappedProcess) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attachIOMutex.RLock()
	defer fake.attachIOMutex.RUnlock()
	fake.setInterruptMutex.RLock()
	defer fake.setInterruptMutex.RUnlock()
	fake.writePIDFileMutex.RLock()
	defer fake.writePIDFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WrappedProcess) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.WrappedProcess = new(WrappedProcess)
