// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/winc/hcs"
	"code.cloudfoundry.org/winc/runtime"
)

type ProcessWrapper struct {
	WrapStub        func(hcs.Process) runtime.WrappedProcess
	wrapMutex       sync.RWMutex
	wrapArgsForCall []struct {
		arg1 hcs.Process
	}
	wrapReturns struct {
		result1 runtime.WrappedProcess
	}
	wrapReturnsOnCall map[int]struct {
		result1 runtime.WrappedProcess
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProcessWrapper) Wrap(arg1 hcs.Process) runtime.WrappedProcess {
	fake.wrapMutex.Lock()
	ret, specificReturn := fake.wrapReturnsOnCall[len(fake.wrapArgsForCall)]
	fake.wrapArgsForCall = append(fake.wrapArgsForCall, struct {
		arg1 hcs.Process
	}{arg1})
	stub := fake.WrapStub
	fakeReturns := fake.wrapReturns
	fake.recordInvocation("Wrap", []interface{}{arg1})
	fake.wrapMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProcessWrapper) WrapCallCount() int {
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	return len(fake.wrapArgsForCall)
}

func (fake *ProcessWrapper) WrapCalls(stub func(hcs.Process) runtime.WrappedProcess) {
	fake.wrapMutex.Lock()
	defer fake.wrapMutex.Unlock()
	fake.WrapStub = stub
}

func (fake *ProcessWrapper) WrapArgsForCall(i int) hcs.Process {
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	argsForCall := fake.wrapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ProcessWrapper) WrapReturns(result1 runtime.WrappedProcess) {
	fake.wrapMutex.Lock()
	defer fake.wrapMutex.Unlock()
	fake.WrapStub = nil
	fake.wrapReturns = struct {
		result1 runtime.WrappedProcess
	}{result1}
}

func (fake *ProcessWrapper) WrapReturnsOnCall(i int, result1 runtime.WrappedProcess) {
	fake.wrapMutex.Lock()
	defer fake.wrapMutex.Unlock()
	fake.WrapStub = nil
	if fake.wrapReturnsOnCall == nil {
		fake.wrapReturnsOnCall = make(map[int]struct {
			result1 runtime.WrappedProcess
		})
	}
	fake.wrapReturnsOnCall[i] = struct {
		result1 runtime.WrappedProcess
	}{result1}
}

func (fake *ProcessWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProcessWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.ProcessWrapper = new(ProcessWrapper)
